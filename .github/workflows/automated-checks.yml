name: All Automated Checks

on:
  workflow_dispatch:
  # Run this workflow at 12 PM UTC (which is 5 AM MST) every weekday. Doesn't account for daylight saving time.
  schedule:
    - cron: "0 12 * * 1-5"

env:
  REACT_APP_ENV: ${{ vars.REACT_APP_ENV }}
  ALGORITHM: ${{ vars.ALGORITHM }}
  EXPIRY: ${{ vars.EXPIRY }}
  ISSUER: ${{ vars.ISSUER }}
  SECRET: ${{ secrets.SECRET }}
  TEST_ENV: ${{ vars.TEST_ENV }}
  TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
  TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}

jobs:
  prettier:
    name: Prettier
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Print Node.js version
        run: node --version

      - name: Install dependencies
        run: npm ci

      - name: Print Prettier version
        run: npx prettier --version

      - name: Run Prettier check
        run: npx prettier --check .

  super-linter:
    name: Super-Linter
    timeout-minutes: 15
    runs-on: ubuntu-latest
    if: always()

    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the list of files that changed across commits
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v6.0.0
        env:
          DEFAULT_BRANCH: main
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_STANDARD: false # Using ESLint instead
          VALIDATE_TYPESCRIPT_STANDARD: false # Using ESLint instead

  jest-tests:
    name: Jest Unit Tests
    timeout-minutes: 15
    needs: [prettier, super-linter]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm run test:all:coverage:ci

      - name: Upload Jest coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  playwright-visual-tests:
    name: Playwright Visual Tests
    timeout-minutes: 60
    needs: [jest-tests]
    # Running on windows because the OS matters for visual testing comparisons.
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Print Node.js version
        run: node --version

      - name: Install development dependencies
        run: npm ci

      - name: Install Playwright dependencies
        run: npm ci
        working-directory: playwright

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: playwright

      - name: Print Playwright version
        run: npx playwright --version
        working-directory: playwright

      - name: Run Playwright tests
        run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        working-directory: playwright

      - name: Upload Playwright blob report to GitHub Actions Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: playwright/blob-report
          retention-days: 1

  merge-playwright-reports:
    needs: [playwright-visual-tests]
    if: always() && needs.playwright-visual-tests.result != 'skipped'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Print Node.js version
        run: node --version

      - name: Install development dependencies
        run: npm ci

      - name: Install Playwright dependencies
        run: npm ci
        working-directory: playwright

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: playwright/all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports
        working-directory: playwright

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: playwright/playwright-report
          retention-days: 30

  slack-notification:
    name: Slack Notification
    needs:
      [
        prettier,
        super-linter,
        jest-tests,
        playwright-visual-tests,
        merge-playwright-reports,
      ]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Get job statuses
        id: get_job_statuses
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.runId;
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });
            return jobs.jobs.filter(job => job.name !== 'Slack Notification').map(job => {
              const status = job.conclusion || job.status;
              const emoji = status === 'success' ? ':white_check_mark:' : (status === 'failure' ? ':x:' : ':warning:');
              return `${job.name}: ${status} ${emoji}`;
            });

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          text: |
            Job Statuses:
            ${{ join('\n', steps.get_job_statuses.outputs.result) }}
            Slack Notification: ${{ job.status }} :white_check_mark:
          status: ${{ job.status }}
          fields: repo,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
